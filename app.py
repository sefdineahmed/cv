# app.py
import streamlit as st
from streamlit_extras.colored_header import colored_header
from streamlit_extras.stylable_container import stylable_container
import base64
import datetime

# Configuration de la page
st.set_page_config(
    page_title="Ing√©nieur Statistique & Informatique D√©cisionnelle",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√©
def load_css():
    with open("styles.css") as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)
load_css()

# Fonction pour les backgrounds
def get_base64(bin_file):
    with open(bin_file, 'rb') as f:
        data = f.read()
    return base64.b64encode(data).decode()

def set_background(png_file):
    bin_str = get_base64(png_file)
    page_bg_img = '''
    <style>
    .stApp {
        background-image: url("data:image/png;base64,%s");
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
    }
    </style>
    ''' % bin_str
    st.markdown(page_bg_img, unsafe_allow_html=True)

# set_background('background.png')  # D√©commentez pour utiliser un background personnalis√©

# Donn√©es du CV
CV_DATA = {
    "nom": "Ing√©nieur en Statistique et Informatique D√©cisionnelles",
    "tagline": "Votre expert en donn√©es pour des d√©cisions √©clair√©es",
    "apropos": "Je suis un ing√©nieur sp√©cialis√© en analyse de donn√©es et mod√©lisation, avec plus de 5 ans d'exp√©rience dans la r√©solution de probl√©matiques complexes li√©es aux donn√©es. Mon expertise couvre les statistiques appliqu√©es et l'informatique d√©cisionnelle, me permettant de transformer des donn√©es brutes en informations strat√©giques.",
    "competences": {
        "Analyse de Donn√©es": {"niveau": 95, "desc": "Ma√Ætrise de l'analyse multidimensionnelle et multivari√©e"},
        "Mod√©lisation Pr√©dictive": {"niveau": 90, "desc": "Conception et impl√©mentation de mod√®les pr√©dictifs"},
        "Programmation": {"niveau": 92, "desc": "R, Python, SAS pour le traitement et l'analyse"},
        "Enqu√™tes & Questionnaires": {"niveau": 85, "desc": "Conception et traitement rigoureux"},
        "Communication": {"niveau": 88, "desc": "Vulgarisation de r√©sultats complexes"}
    },
    "experiences": [
        {
            "poste": "Pr√©vention de Fraudes Bancaires",
            "description": "D√©veloppement de mod√®les sophistiqu√©s r√©duisant les pertes financi√®res"
        },
        {
            "poste": "Audit et √âvaluation de Risques",
            "description": "Optimisation des strat√©gies pour entreprises d'assurance"
        },
        {
            "poste": "Encadrement d'√âquipe",
            "description": "Gestion d'une √©quipe de 3 statisticiens juniors"
        },
        {
            "poste": "Rapports D√©cisionnels",
            "description": "Production de tableaux de bord pour directions g√©n√©rales"
        }
    ],
    "projets": [
        {
            "nom": "Tableau de Bord Interactif",
            "description": "Visualisation des KPIs pour suivi des performances"
        },
        {
            "nom": "Scoring Client (Banque)",
            "description": "Optimisation de l'attribution de cr√©dits et gestion des risques"
        },
        {
            "nom": "Optimisation de Production",
            "description": "R√©duction des co√ªts par simulation statistique"
        },
        {
            "nom": "√âtude de Satisfaction Clients",
            "description": "Recommandations strat√©giques pour grande enseigne"
        }
    ],
    "formation": [
        {"diplome": "Ing√©nieur en Statistique", "completion": 100},
        {"diplome": "Analyse Num√©rique", "completion": 95},
        {"diplome": "Cours Fondamentaux", "completion": 90}
    ],
    "outils": [
        "Python", "R", "SAS", "SQL", "Power BI", 
        "Tableau", "Spark", "Hadoop", "Scikit-learn", "TensorFlow"
    ],
    "contact": {
        "email": "votre.email@example.com",
        "telephone": "+33 X XX XX XX XX",
        "reseaux": ["LinkedIn", "GitHub", "Twitter"]
    }
}

# Animation du header
with st.container():
    colored_header(
        label="",
        description="",
        color_name="blue-70"
    )
    st.markdown(f"<h1 class='main-title'>{CV_DATA['nom']}</h1>", unsafe_allow_html=True)
    st.caption(f"#### {CV_DATA['tagline']}")
    st.markdown("---")

# Navigation
def navigation():
    with st.sidebar:
        st.image("https://cdn.pixabay.com/photo/2017/02/18/11/00/statistic-2076765_960_720.png", width=120)
        st.title("Navigation")
        sections = ["Accueil", "√Ä Propos de Moi", "Comp√©tences Cl√©s", "Exp√©riences Professionnelles", 
                   "Projets R√©alis√©s", "Formation et Dipl√¥mes", "Outils et Technologies", "Contact"]
        choice = st.radio("", sections)
        st.markdown("---")
        
        # Widget interactif
        st.subheader("Explorez mon univers")
        tech_filter = st.multiselect("Filtrer par technologie:", CV_DATA["outils"])
        exp_years = st.slider("Ann√©es d'exp√©rience:", 1, 10, 5)
        
        # T√©l√©charger CV
        with open("CV.pdf", "rb") as pdf_file:
            PDFbyte = pdf_file.read()
        st.download_button(
            label="üì• T√©l√©charger mon CV",
            data=PDFbyte,
            file_name="CV_Ingenieur_Data.pdf",
            mime="application/pdf"
        )
    return choice, tech_filter, exp_years

# Sections
def afficher_accueil():
    with st.container():
        cols = st.columns([1,2])
        with cols[0]:
            st.image("https://cdn.pixabay.com/photo/2018/08/14/13/23/ocean-3605547_960_720.jpg", 
                     caption="Transformer les donn√©es en valeur")
        with cols[1]:
            with stylable_container(
                key="accueil_box",
                css_styles="""
                {
                    background-color: rgba(13, 17, 23, 0.7);
                    border-radius: 10px;
                    padding: 2rem;
                    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                }
                """
            ):
                st.markdown(f"<h2 style='color: #4FC0E8;'>Bienvenue dans mon portfolio data</h2>", unsafe_allow_html=True)
                st.markdown("""
                <p style='font-size: 18px;'>
                Sp√©cialiste de la transformation des donn√©es complexes en strat√©gies actionnables, 
                je combine expertise technique et vision business pour cr√©er de la valeur.
                </p>
                """, unsafe_allow_html=True)
                
                # Stats interactives
                col_stat = st.columns(3)
                col_stat[0].metric("+ Projets", "50+", "Analytics")
                col_stat[1].metric("Mod√®les", "120+", "Machine Learning")
                col_stat[2].metric("Efficacit√©", "35% ‚Üë", "Optimisation")

def afficher_apropos():
    st.header("√Ä Propos de Moi")
    st.write(CV_DATA["apropos"])
    
    # Timeline interactive
    st.subheader("Parcours Professionnel")
    years = [datetime.date.today().year - i for i in range(5,0,-1)]
    for year in years:
        with st.expander(f"üèÜ {year} - R√©alisations majeures"):
            st.write(f"- Projet innovant en analyse pr√©dictive secteur bancaire")
            st.write(f"- Optimisation processus r√©duisant les co√ªts de 15%")
            st.write(f"- Formation d'une √©quipe de 5 data analysts")

def afficher_competences():
    st.header("Comp√©tences Cl√©s")
    cols = st.columns(2)
    
    for i, (skill, details) in enumerate(CV_DATA["competences"].items()):
        with cols[i%2]:
            with stylable_container(
                key=f"skill_{skill}",
                css_styles="""
                {
                    border: 1px solid rgba(49, 51, 63, 0.2);
                    border-radius: 10px;
                    padding: 1rem;
                    margin-bottom: 1rem;
                    background: linear-gradient(90deg, rgba(79,192,232,0.2) 0%, rgba(79,192,232,0.05) 100%);
                }
                """
            ):
                st.subheader(f"{skill}")
                st.progress(details["niveau"] / 100)
                st.caption(f"{details['niveau']}% - {details['desc']}")

def afficher_experiences(tech_filter):
    st.header("Exp√©riences Professionnelles")
    
    for exp in CV_DATA["experiences"]:
        with st.expander(f"üìå {exp['poste']}", expanded=True):
            st.write(exp["description"])
            if tech_filter:
                st.info(f"Technologies utilis√©es: {', '.join(tech_filter)}")
            st.button("Voir les d√©tails techniques", key=f"btn_{exp['poste']}")

def afficher_projets():
    st.header("Projets R√©alis√©s")
    
    for projet in CV_DATA["projets"]:
        with stylable_container(
            key=f"projet_{projet['nom']}",
            css_styles="""
            {
                border-radius: 10px;
                padding: 1rem;
                margin: 1rem 0;
                background-color: rgba(30, 50, 70, 0.3);
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                transition: all 0.3s ease;
            }
            :hover {
                transform: translateY(-5px);
                box-shadow: 0 6px 12px rgba(0,0,0,0.15);
            }
            """
        ):
            st.subheader(projet["nom"])
            st.write(projet["description"])
            
            # Visualisation interactive
            if "Tableau de Bord" in projet["nom"]:
                chart_data = {"KPI": ["Satisfaction", "Efficacit√©", "Rentabilit√©"], "Avant": [60, 65, 70], "Apr√®s": [85, 88, 92]}
                st.bar_chart(chart_data, x="KPI")

def afficher_formation():
    st.header("Formation et Dipl√¥mes")
    
    for diplome in CV_DATA["formation"]:
        st.subheader(diplome["diplome"])
        st.progress(diplome["completion"] / 100)
        st.caption(f"Compl√©tion: {diplome['completion']}%")

def afficher_outils():
    st.header("Outils et Technologies")
    
    cols = st.columns(4)
    for i, tool in enumerate(CV_DATA["outils"]):
        with cols[i % 4]:
            with stylable_container(
                key=f"tool_{tool}",
                css_styles="""
                {
                    border-radius: 50px;
                    padding: 0.5rem 1rem;
                    margin: 0.5rem;
                    text-align: center;
                    background-color: rgba(79, 192, 232, 0.2);
                }
                """
            ):
                st.markdown(f"**{tool}**")

def afficher_contact():
    st.header("Contact & Informations")
    
    col_contact = st.columns([1,2])
    with col_contact[0]:
        st.subheader("Restons Connect√©s")
        st.write(f"‚úâÔ∏è {CV_DATA['contact']['email']}")
        st.write(f"üì± {CV_DATA['contact']['telephone']}")
        
        st.subheader("Suivez-moi")
        for res in CV_DATA["contact"]["reseaux"]:
            st.button(f"{res}", use_container_width=True)
    
    with col_contact[1]:
        with st.form(key='contact_form'):
            st.subheader("Envoyez un message")
            name = st.text_input("Nom complet")
            email = st.text_input("Email")
            message = st.text_area("Message")
            submit_button = st.form_submit_button(label='Envoyer')
            
            if submit_button:
                st.success("Message envoy√© avec succ√®s!")

# Application principale
def main():
    choix, tech_filter, exp_years = navigation()
    
    if choix == "Accueil":
        afficher_accueil()
    elif choix == "√Ä Propos de Moi":
        afficher_apropos()
    elif choix == "Comp√©tences Cl√©s":
        afficher_competences()
    elif choix == "Exp√©riences Professionnelles":
        afficher_experiences(tech_filter)
    elif choix == "Projets R√©alis√©s":
        afficher_projets()
    elif choix == "Formation et Dipl√¥mes":
        afficher_formation()
    elif choix == "Outils et Technologies":
        afficher_outils()
    elif choix == "Contact":
        afficher_contact()

if __name__ == "__main__":
    main()
